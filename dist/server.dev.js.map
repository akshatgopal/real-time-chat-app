{"version":3,"sources":["server.js"],"names":["path","require","http","express","socketio","formatMessage","userJoin","getCurrentUser","userLeave","getRoomUsers","app","server","createServer","io","use","join","__dirname","botName","on","socket","username","room","user","id","emit","broadcast","to","users","msg","PORT","process","env","listen","console","log"],"mappings":"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","sourcesContent":["const path = require('path');\r\nconst http = require('http');\r\nconst express = require('express');\r\nconst socketio = require('socket.io');\r\nconst formatMessage = require('./utils/messages');\r\nconst {\r\n  userJoin,\r\n  getCurrentUser,\r\n  userLeave,\r\n  getRoomUsers\r\n} = require('./utils/users');\r\n\r\nconst app = express();\r\nconst server = http.createServer(app);\r\nconst io = socketio(server);\r\n\r\n// Set static folder\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\nconst botName = 'Realtime Bot';\r\n\r\n// Run when client connects\r\nio.on('connection', socket => {\r\n  socket.on('joinRoom', ({ username, room }) => {\r\n    const user = userJoin(socket.id, username, room);\r\n\r\n    socket.join(user.room);\r\n\r\n    // Welcome current user\r\n    socket.emit('message', formatMessage(botName, 'Welcome to Realtime chat app!'));\r\n\r\n    // Broadcast when a user connects\r\n    socket.broadcast\r\n      .to(user.room)\r\n      .emit(\r\n        'message',\r\n        formatMessage(botName, `${user.username} has joined the chat`)\r\n      );\r\n\r\n    // Send users and room info\r\n    io.to(user.room).emit('roomUsers', {\r\n      room: user.room,\r\n      users: getRoomUsers(user.room)\r\n    });\r\n  });\r\n\r\n  // Listen for chatMessage\r\n  socket.on('chatMessage', msg => {\r\n    const user = getCurrentUser(socket.id);\r\n\r\n    io.to(user.room).emit('message', formatMessage(user.username, msg));\r\n  });\r\n\r\n  // Runs when client disconnects\r\n  socket.on('disconnect', () => {\r\n    const user = userLeave(socket.id);\r\n\r\n    if (user) {\r\n      io.to(user.room).emit(\r\n        'message',\r\n        formatMessage(botName, `${user.username} has left the chat`)\r\n      );\r\n\r\n      // Send users and room info\r\n      io.to(user.room).emit('roomUsers', {\r\n        room: user.room,\r\n        users: getRoomUsers(user.room)\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\nconst PORT = process.env.PORT || 4000;\r\n\r\nserver.listen(PORT, () => console.log(`Server running on port ${PORT}`));"],"file":"server.dev.js"}