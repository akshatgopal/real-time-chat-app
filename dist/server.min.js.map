{"version":3,"sources":["server.js"],"names":["path","require","http","socketio","formatMessage","userJoin","getCurrentUser","userLeave","getRoomUsers","app","express","createServer","server","use","join","__dirname","on","socket","botName","_ref","username","room","user","id","emit","to","io","msg","users","env","PORT","process","listen","console","log","concat"],"mappings":"aAAA,IAAMA,KAAOC,QAAQ,QACfC,KAAOD,QAAQ,QADfD,QAAOC,QAAQ,WAGfE,SAAWF,QAAQ,aAFnBC,cAAeD,QAArB,6BAGMG,QAAAA,iBAFNC,kBAAAA,SAKEC,wBAAAA,eAJFC,mBAAAA,UAMEC,sBAAAA,aAGIC,IAAMC,UANVL,OAOaH,KAAKS,aAAaF,KAN/BH,GAAAA,SAOkBM,QAGpBH,IAAII,IAAIH,QAAO,OAAQV,KAAKc,KAAKC,UAAW,YAJ5C,IAAMH,QAASV,eAIfO,GAAGO,GAACH,aAAW,SAAAI,GAEfA,EAAMC,GAAO,WAAG,SAAAC,GAEhB,IAFgBC,EAEhBD,EAFgBC,SAEhBC,EAAAF,EAAAE,KAGUC,EAAOjB,SAASY,EAAOM,GAAIH,EAAUC,GAD7CJ,EAAAH,KAAUQ,EAAAD,MACRJ,EAAMK,KAAOjB,UAASY,cAAWG,QAAjC,kCAKAH,EAAOO,UAIJC,GAAGH,EAAKD,MADXJ,KAGI,UAKDQ,cAAcD,QAAAA,GAAAA,OAAKF,EAAaF,SAAlBI,0BAjBnBE,GAuBAD,GAAAH,EAAAD,MAAAG,KAAA,YAAA,CALIH,KAAMC,EAAKD,KAMfJ,MAAUT,aAAVc,EAAyBD,UAOzBJ,EAAOD,GAAG,cAAc,SAAAW,GACtB,IAAML,EAAOf,eAAiBgB,EAA9BA,IAEAG,GAAAD,GAAIH,EAAMD,MAAAG,KAAA,UAAApB,cAAAkB,EAAAF,SAAAO,MAQNN,EAAAA,GAAI,aAD6B,WAEjCO,IAAAA,EAAOpB,UAAYS,EAAMI,IAE5BC,IAdHI,GAAAD,GAAAH,EAAAD,MAAAG,KAhCF,UAkDUpB,cAAGc,QAAQW,GAAAA,OAAYP,EAAjCF,SAAqBS,wBARfH,GAAGD,GAAGH,EAAKD,MAAMG,KAAK,YAAa,CACjCH,KAAMC,EAAKD,KACXO,MAAOpB,aAAac,EAAKD,aAMjC,IAAMS,KAAOC,QAAQF,IAAIC,MAAQ,IAEjClB,OAAOoB,OAAOF,KAAM,WAAA,OAAMG,QAAQC,IAAR,0BAAAC,OAAsCL","file":"server.min.js","sourcesContent":["const path = require('path');\r\nconst http = require('http');\r\nconst express = require('express');\r\nconst socketio = require('socket.io');\r\nconst formatMessage = require('./utils/messages');\r\nconst {\r\n  userJoin,\r\n  getCurrentUser,\r\n  userLeave,\r\n  getRoomUsers\r\n} = require('./utils/users');\r\n\r\nconst app = express();\r\nconst server = http.createServer(app);\r\nconst io = socketio(server);\r\n\r\n// Set static folder\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\nconst botName = 'Realtime Bot';\r\n\r\n// Run when client connects\r\nio.on('connection', socket => {\r\n  socket.on('joinRoom', ({ username, room }) => {\r\n    const user = userJoin(socket.id, username, room);\r\n\r\n    socket.join(user.room);\r\n\r\n    // Welcome current user\r\n    socket.emit('message', formatMessage(botName, 'Welcome to Realtime chat app!'));\r\n\r\n    // Broadcast when a user connects\r\n    socket.broadcast\r\n      .to(user.room)\r\n      .emit(\r\n        'message',\r\n        formatMessage(botName, `${user.username} has joined the chat`)\r\n      );\r\n\r\n    // Send users and room info\r\n    io.to(user.room).emit('roomUsers', {\r\n      room: user.room,\r\n      users: getRoomUsers(user.room)\r\n    });\r\n  });\r\n\r\n  // Listen for chatMessage\r\n  socket.on('chatMessage', msg => {\r\n    const user = getCurrentUser(socket.id);\r\n\r\n    io.to(user.room).emit('message', formatMessage(user.username, msg));\r\n  });\r\n\r\n  // Runs when client disconnects\r\n  socket.on('disconnect', () => {\r\n    const user = userLeave(socket.id);\r\n\r\n    if (user) {\r\n      io.to(user.room).emit(\r\n        'message',\r\n        formatMessage(botName, `${user.username} has left the chat`)\r\n      );\r\n\r\n      // Send users and room info\r\n      io.to(user.room).emit('roomUsers', {\r\n        room: user.room,\r\n        users: getRoomUsers(user.room)\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\nconst PORT = process.env.PORT || 4000;\r\n\r\nserver.listen(PORT, () => console.log(`Server running on port ${PORT}`));"]}